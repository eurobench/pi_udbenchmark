#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Thu Apr  2 11:06:17 2020@author: Nick1"""import scipy.io# some_file.pyimport syssys.path.insert(1, '/Users/Nick1/KinPy')import kinpy as kpimport matplotlib.pyplot as pltimport numpy as npimport numpy.matlibimport pandas as pdimport yamlimport astimport UDperform as pisimport pdb# Load the preprocessed data#joint = pandas.read_csv("/Users/Nick1/Documents/=EURObench=/BenchData/Preproc/BenchRef/SpeedRoll/Joint_centers_3D_trajectory/subject_04_jointTrajectories_02.csv")joint = pd.read_csv("subject_04_jointTrajectories_01.csv")com = pd.read_csv("subject_04_comTrajectories_01.csv")comIR = pd.read_csv("subject_04_comItensor_01.csv")angMom = pd.read_csv("subject_04_angMomentum_01.csv")## translate joint in numpy array [seems unnescessary]#joint= df.to_numpy()def read_events(fname):    with open(fname, 'r', encoding='utf8') as stream:        try:            yaml_eve = yaml.safe_load(stream)        except yaml.YAMLError as exc:            print(exc)                yaml_eve = yaml_eve.replace(":","=")    yaml_eve = yaml_eve.replace(" ","")    yaml_eve = yaml_eve.replace("\n","")    for ieve in range(4):        ibeg = yaml_eve.find("[")        iend = yaml_eve.find("]")        print(ieve)        if yaml_eve[0:9] in ["l_toe_off"]:            l_toe_off = eval(yaml_eve[ibeg:iend+1])        if yaml_eve[0:9] in ["r_toe_off"]:            r_toe_off = eval(yaml_eve[ibeg:iend+1])        if yaml_eve[0:13] in ["l_heel_strike"]:            l_heel_strike = eval(yaml_eve[ibeg:iend+1])        if yaml_eve[0:13] in ["r_heel_strike"]:            r_heel_strike = eval(yaml_eve[ibeg:iend+1])        yaml_eve = yaml_eve[iend+1:]    return l_toe_off,r_toe_off,l_heel_strike,r_heel_strikelto,rto,lhs,rhs = read_events("subject_04_gaitEvents_01")class strct():    passevents = strct()events.l_toe_off = ltoevents.r_toe_off = rtoevents.l_heel_strike = lhsevents.r_heel_strike = rhsfs = 50# calculate spatiotemporal parametersst = pis.calcSpatTemp(joint,events,fs)# calculate statespace and local divergence exponentws= 8#period = st.t_strideperiod = 2.04nnbs = 4state = pis.calcStateSpace(com.COMy,events,fs,4,10)diverg,locdiv = pis.calcLDE(state,ws,50,period,nnbs,True)TMspeed = [0,-1.5,0] #m/sTMangle = [0,-6,0] # x angle y zmass = 33.3551fpe = pis.calcFPE(joint,com,angMom,comIR,mass,TMspeed,TMangle)FPMl,FPMr,rsq_l,rsq_r,coml = pis.calcFPM(joint,com,events,100)plt.plot(np.linspace(0,50,51),rsq_l,label='Rsquare (left)')plt.plot(np.linspace(0,50,51),rsq_r,label='Rsquare (right)')plt.xlabel('Percentage')plt.ylabel('Variance Explained [Rsquare]')plt.legend()plt.plot(np.linspace(0,50,51),coml,label='CoM (left)')plt.xlabel('Percentage of step cycle')plt.ylabel('Position [m]')# plt.legend()# from sklearn import linear_model,metrics# mat = scipy.io.loadmat('topred.mat')# reg_m = linear_model.LinearRegression()# reg_m.fit(mat['pred_Lstance'],mat['foot_L_sample'])# yhat = reg_m.predict(mat['pred_Lstance'])# metrics.r2_score(mat['foot_L_sample'],yhat)# dat = np.hstack([np.array(mat['foot_L_sample']),np.array(mat['pred_Lstance'])])# A = pd.DataFrame(dat,columns = ['footpos','pred1','pred2','pred3'])# X = A[['pred1','pred2']]# y = A[['footpos']]# reg_df = linear_model.LinearRegression()# reg_df.fit(X,y)# reg_df.score(X,y)# yhat_df = reg_m.predict(X)# metrics.r2_score(y,yhat_df)# import statsmodels.api as sm# # with statsmodels# X = sm.add_constant(X) # adding a constant # model = sm.OLS(y, X).fit()# predictions = model.predict(X)  # print_model = model.summary()# print(print_model)# fFPE(.3345,4.2303,1.1235,9.81,33.3551,-.1346,-3.9222e-04,1.7683,0.0310)